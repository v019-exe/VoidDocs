{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenid@","text":"<p>Hola, lector, Bienvenid@ a mis docs, te dejo un peque\u00f1o resumen de lo que hay actualmente:</p> <p>docs/ \u2502   \u251c\u2500\u2500 index.md \u2502   \u2514\u2500\u2500 php/ \u2502       \u251c\u2500\u2500 index.md</p> <p>Estos son los contenidos que hay</p>"},{"location":"php/","title":"Introducci\u00f3n a PHP","text":"<p>Bienvenido a la secci\u00f3n de PHP, en esta secci\u00f3n te encontrar\u00e1s con todo lo esecial que necesitas saber sobre PHP.</p>"},{"location":"php/#variables","title":"Variables","text":"<p>Una variable en PHP es un contenedor que almacena un valor o una referencia a un valor en memoria. PHP es un lenguaje de tipado d\u00e9bil, lo que significa que las variables no necesitan declarar un tipo espec\u00edfico antes de usarlas, y el tipo se determina din\u00e1micamente en funci\u00f3n del valor asignado.</p> <pre><code>&lt;?php\n$nombre = \"VoidSec\";\n?&gt;\n</code></pre> <p>Adem\u00e1s, en PHP las variables pueden almacenar referencias a otros valores. Es decir, en lugar de almacenar directamente un valor, pueden apuntar a la direcci\u00f3n de memoria de otro dato, como ocurre con los arrays y objetos.</p>"},{"location":"php/#tipos-de-datos","title":"Tipos de datos","text":"<p>PHP tiene varios tipos de datos, que se pueden clasificar principalmente en tipos escalares y tipos compuestos. Seguidamente los explicamos:</p>"},{"location":"php/#tipos-escalares","title":"Tipos escalares","text":"<p>Los tipos escalares son aquellos que representan un solo valor. En otras palabras, un tipo escalar almacena un valor at\u00f3mico, es decir, no est\u00e1 compuesto por otros valores, sino que es una unidad indivisible.</p> <ol> <li> <p>Enteros (<code>int</code>, <code>integer</code>): Un entero es un n\u00famero sin decimales, ya sea positivo o negativo. <pre><code>&lt;?php\n$numero = 10;\n$numero = -5;\n?&gt;\n</code></pre></p> <ul> <li>Los valores enteros en PHP pueden ser n\u00fameros tanto positivos como negativos.</li> <li>No pueden contener decimales.</li> </ul> </li> <li> <p>Flotantes (<code>float</code>, <code>double</code>): Un flotante (o double) es un n\u00famero que tiene decimales. Los n\u00fameros con decimales son llamados flotantes porque su punto decimal puede \"flotar\" en cualquier parte del n\u00famero. <pre><code>&lt;?php\n$numero = 10.5;\n$numero = -5.25;\n?&gt;\n</code></pre></p> <ul> <li>Los flotantes son \u00fatiles para representar valores m\u00e1s precisos, como precios, temperaturas, etc.</li> <li>Pueden ser positivos o negativos y tienen decimales.</li> </ul> </li> <li> <p>Cadenas de texto (<code>string</code>): Una cadena (string) es un conjunto de caracteres, como palabras, frases o incluso n\u00fameros representados como texto. Las cadenas son muy utilizadas para trabajar con texto. <pre><code>&lt;?php\n$texto = \"Esto es una cadena de texto\";\n$texto_2 = \"Esto es otra cadena de texto\";\n?&gt;\n</code></pre></p> <ul> <li>Las cadenas pueden estar entre comillas dobles (\"texto\") o simples ('texto'), y pueden contener letras, n\u00fameros y caracteres especiales.</li> <li>Se usan mucho para representar nombres, direcciones, mensajes, etc.</li> </ul> </li> <li> <p>Booleanos (<code>bool</code>): Un booleano representa un valor de verdadero o falso (<code>true</code> o <code>false</code>). Se utiliza en condiciones o en estructuras de control de flujo, como <code>if</code>, para tomar decisiones. <pre><code>&lt;?php\n$esVerdadero = true;\n$esFalso = false;\n?&gt;\n</code></pre></p> <ul> <li>Los booleanos son muy \u00fatiles para la l\u00f3gica de programaci\u00f3n, especialmente en comparaciones o validaciones.</li> </ul> </li> </ol>"},{"location":"php/#tipos-compuestos","title":"Tipos compuestos","text":"<p>Los tipos compuestos son aquellos que pueden almacenar m\u00faltiples valores. A diferencia de los tipos escalares que solo almacenan un \u00fanico valor, los tipos compuestos agrupan varios valores, y esos valores pueden ser de diferentes tipos. En PHP, los tipos compuestos m\u00e1s comunes son arrays y objetos.</p> <ol> <li> <p>Arrays (<code>array</code>): Un array es una estructura de datos que puede almacenar varios valores, los cuales pueden ser de diferentes tipos. Los arrays pueden ser indexados (donde cada valor tiene un \u00edndice num\u00e9rico) o asociativos (donde cada valor est\u00e1 asociado a una clave personalizada).</p> <ul> <li>Array indexado: Los arrays indexados utilizan \u00edndices num\u00e9ricos (por defecto empiezan desde 0). <pre><code>&lt;?php\n$colores = [\"rojo\", \"verde\", \"azul\"];  // Un array indexado\necho $colores[0];  // Salida: rojo\n?&gt;\n</code></pre></li> <li>Array asociativo (<code>array</code>):  Los arrays asociativos permiten asociar valores a claves personalizadas. <pre><code>&lt;?php\n$persona = [\n    \"nombre\" =&gt; \"Juan\",\n    \"edad\" =&gt; 30,\n    \"ciudad\" =&gt; \"Madrid\"\n];  // Un array asociativo\necho $persona[\"nombre\"];  // Salida: Juan\n?&gt;\n</code></pre></li> <li>Objetos (<code>object</code>): Un objeto es una instancia de una clase. Las clases son plantillas o moldes que definen las propiedades y m\u00e9todos de los objetos. Los objetos se usan en la Programaci\u00f3n Orientada a Objetos (OOP) para agrupar datos y funcionalidades relacionadas. <pre><code>&lt;?php\nclass Persona {\n    public $nombre;\n    public $edad;\n\n    public function __construct($nombre, $edad) {\n        $this-&gt;nombre = $nombre;\n        $this-&gt;edad = $edad;\n    }\n\n    public function saludar() {\n        return \"Hola, mi nombre es \" . $this-&gt;nombre;\n    }\n}\n\n$persona1 = new Persona(\"Juan\", 30);  // Crear un objeto\necho $persona1-&gt;saludar();  // Salida: Hola, mi nombre es Juan\n?&gt;\n</code></pre></li> </ul> </li> </ol> <p>Un ejemplo ser\u00eda:</p> <pre><code>&lt;?php\n$a = 10;\n$b = &amp;$a;  // $b es una referencia a $a\n$b = 20;    // Cambia tanto $b como $a\necho $a;    // Salida: 20\n?&gt;\n</code></pre>"},{"location":"php/#tipos-de-variables-y-referencias","title":"Tipos de variables y referencias","text":"<p>PHP permite dos tipos de paso de datos: por valor y por referencia. En el paso por valor, se crea una copia del dato y se trabaja sobre ella. En el paso por referencia, las variables apuntan al mismo bloque de memoria, por lo que cualquier cambio realizado afectar\u00e1 al dato original.</p>"},{"location":"php/#operadores","title":"Operadores","text":"<p>Los operadores aritm\u00e9ticos permiten realizar operaciones matem\u00e1ticas en PHP. Adem\u00e1s de los operadores aritm\u00e9ticos, existen otros tipos de operadores, como los operadores de comparaci\u00f3n y los operadores l\u00f3gicos, que permiten realizar comparaciones y operar con valores booleanos, respectivamente.</p>"},{"location":"php/#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<pre><code>&lt;?php\n$a = 5;\n$b = 3;\necho $a + $b;  // Suma\necho $a - $b;  // Resta\necho $a * $b;  // Multiplicaci\u00f3n\necho $a / $b;  // Divisi\u00f3n\necho $a % $b;  // M\u00f3dulo (resto de la divisi\u00f3n)\necho $a ** $b; // Potencia (a elevado a la b)\n?&gt;\n</code></pre> <ul> <li> <p><code>+</code> : Suma</p> </li> <li> <p><code>-</code> : Resta</p> </li> <li> <p><code>*</code> : Multiplicaci\u00f3n</p> </li> <li> <p><code>/</code> : Divisi\u00f3n</p> </li> <li> <p><code>%</code> : M\u00f3dulo (resto de la divisi\u00f3n)</p> </li> <li> <p><code>**</code> : Potencia (a elevado a la b)</p> </li> </ul>"},{"location":"php/#operadores-de-comparacion","title":"Operadores de comparaci\u00f3n","text":"<pre><code>&lt;?php\n$a = 5;\n$b = 10;\necho $a == $b;  // Compara si son iguales\necho $a != $b;  // Compara si no son iguales\necho $a &lt; $b;   // Compara si $a es menor que $b\necho $a &gt; $b;   // Compara si $a es mayor que $b\necho $a &lt;= $b;  // Compara si $a es menor o igual que $b\necho $a &gt;= $b;  // Compara si $a es mayor o igual que $b\n?&gt;\n</code></pre> <ul> <li><code>==</code> : Compara si son iguales</li> <li><code>!=</code> : Compara si no son iguales</li> <li><code>&lt;</code> : Compara si $a es menor que $b</li> <li><code>&gt;</code> : Compara si $a es mayor que $b</li> <li><code>&lt;=</code> : Compara si $a es menor o igual que $b</li> <li><code>&gt;=</code> : Compara si $a es mayor o igual que $b</li> </ul>"},{"location":"php/#operadores-logicos","title":"Operadores L\u00f3gicos","text":"<pre><code>&lt;?php\n$a = true;\n$b = false;\necho $a &amp;&amp; $b;  // Y l\u00f3gico (ambas condiciones deben ser verdaderas)\necho $a || $b;  // O l\u00f3gico (al menos una condici\u00f3n debe ser verdadera)\necho !$a;       // Negaci\u00f3n l\u00f3gica (invierte el valor de la condici\u00f3n)\n?&gt;\n</code></pre> <ul> <li><code>&amp;&amp;</code> : Y l\u00f3gico (ambas condiciones deben ser verdaderas) (AND)</li> <li><code>||</code> : O l\u00f3gico (al menos una condici\u00f3n debe ser verdadera) (OR)</li> <li><code>!</code> : Negaci\u00f3n l\u00f3gica (invierte el valor de la condici\u00f3n) (NOT)</li> </ul>"},{"location":"php/#operadores-de-asignacion","title":"Operadores de asignaci\u00f3n","text":"<pre><code>&lt;?php\n$a = 5;\n$a += 3;  // Equivalente a $a = $a + 3;\n$a -= 2;  // Equivalente a $a = $a - 2;\n$a *= 4;  // Equivalente a $a = $a * 4;\n$a /= 2;  // Equivalente a $a = $a / 2;\n$a %= 3;  // Equivalente a $a = $a % 3;\n?&gt;\n</code></pre> <ul> <li><code>=</code>: Asignaci\u00f3n</li> <li><code>+=</code>: Suma y asignaci\u00f3n</li> <li><code>-=</code>: Resta y asignaci\u00f3n</li> <li><code>*=</code>: Multiplicaci\u00f3n y asignaci\u00f3n</li> <li><code>/=</code>: Divisi\u00f3n y asignaci\u00f3n</li> <li><code>%=</code>: M\u00f3dulo y asignaci\u00f3n</li> </ul>"},{"location":"php/#operadores-de-incremento-y-decremento","title":"Operadores de incremento y decremento","text":"<pre><code>&lt;?php\n$a = 5;\necho ++$a;  // Pre-incremento: incrementa antes de usar el valor\necho $a++;  // Post-incremento: usa el valor y luego lo incrementa\necho --$a;  // Pre-decremento: decrementa antes de usar el valor\necho $a--;  // Post-decremento: usa el valor y luego lo decrementa\n?&gt;\n</code></pre> <ul> <li><code>++$a</code>: Pre-incremento: incrementa antes de usar el valor</li> <li><code>$a++</code>: Post-incremento: usa el valor y luego lo incrementa</li> <li><code>--$a</code>: Pre-decremento: decrementa antes de usar el valor</li> <li><code>$a--</code>: Post-decremento: usa el valor y luego lo decrementa</li> </ul>"},{"location":"php/#operadores-de-cadena","title":"Operadores de Cadena","text":"<pre><code>&lt;?php\n$a = \"Hola\";\n$b = \"Mundo\";\necho $a . \" \" . $b;  // Concatena las cadenas\n?&gt;\n</code></pre> <ul> <li><code>.</code>: Concatena las cadenas</li> </ul>"},{"location":"php/#operadores-de-identidad","title":"Operadores de Identidad","text":"<pre><code>&lt;?php\n$a = 5;\n$b = \"5\";\necho $a === $b;  // Compara si $a y $b son id\u00e9nticos (mismo valor y tipo)\necho $a !== $b;  // Compara si $a y $b no son id\u00e9nticos (valor o tipo diferente)\n?&gt;\n</code></pre> <ul> <li><code>===</code>: Compara si $a y $b son id\u00e9nticos (mismo valor y tipo)</li> <li><code>!==</code>: Compara si $a y $b no son id\u00e9nticos (valor o tipo diferente)</li> </ul>"},{"location":"php/#operadores-de-tipo","title":"Operadores de tipo","text":"<pre><code>&lt;?php\n// Definici\u00f3n de variables con diferentes tipos de datos\n$a = 42;                 // Entero\n$b = \"Hello, World!\";    // Cadena\n$c = true;               // Booleano\n$d = [1, 2, 3];          // Array\n$e = new DateTime();     // Objeto\n$f = null;               // Nulo\n$g = 3.14159;            // Flotante\n$h = \"123\";              // Cadena num\u00e9rica\n\n// Verificaci\u00f3n de tipos con is_*() y demostraci\u00f3n de los resultados\necho \"\u00bf\\$a es un entero? \" . (is_int($a) ? 'S\u00ed' : 'No') . \"\\n\";               // Verifica si $a es un entero\necho \"\u00bf\\$b es una cadena? \" . (is_string($b) ? 'S\u00ed' : 'No') . \"\\n\";           // Verifica si $b es una cadena\necho \"\u00bf\\$c es un booleano? \" . (is_bool($c) ? 'S\u00ed' : 'No') . \"\\n\";             // Verifica si $c es un booleano\necho \"\u00bf\\$d es un array? \" . (is_array($d) ? 'S\u00ed' : 'No') . \"\\n\";               // Verifica si $d es un array\necho \"\u00bf\\$e es un objeto? \" . (is_object($e) ? 'S\u00ed' : 'No') . \"\\n\";             // Verifica si $e es un objeto\necho \"\u00bf\\$f es nulo? \" . (is_null($f) ? 'S\u00ed' : 'No') . \"\\n\";                   // Verifica si $f es nulo\necho \"\u00bf\\$g es num\u00e9rico? \" . (is_numeric($g) ? 'S\u00ed' : 'No') . \"\\n\";             // Verifica si $g es un n\u00famero\necho \"\u00bf\\$h es un flotante? \" . (is_float($h) ? 'S\u00ed' : 'No') . \"\\n\";            // Verifica si $h es un flotante\n\n// Verificaci\u00f3n de cadenas num\u00e9ricas y su conversi\u00f3n\necho \"\u00bf\\$h es num\u00e9rico (como cadena)? \" . (is_numeric($h) ? 'S\u00ed' : 'No') . \"\\n\"; // Verifica si $h es num\u00e9rico\n\n// Convertir cadena num\u00e9rica a entero y verificar el tipo\n$h_int = (int)$h;   // Convierte $h de cadena a entero\necho \"Valor de \\$h como entero: $h_int\\n\";\necho \"\u00bf\\$h_int es un entero? \" . (is_int($h_int) ? 'S\u00ed' : 'No') . \"\\n\";  // Verifica si la conversi\u00f3n fue exitosa\n?&gt;\n</code></pre> <ul> <li><code>is_int($a)</code>: Verifica si $a es un entero</li> <li><code>is_string($b)</code>: Verifica si $b es una cadena</li> <li><code>is_bool($c)</code>: Verifica si $c es un booleano</li> <li><code>is_array($d)</code>: Verifica si $d es un array</li> <li><code>is_object($e)</code>: Verifica si $e es un objeto</li> <li><code>is_null($f)</code>: Verifica si $f es un valor nulo</li> <li><code>is_numeric($g)</code>: Verifica si $g es un n\u00famero</li> <li><code>is_float($h)</code>: Verifica si $h es un flotante</li> </ul>"},{"location":"php/#condicionales","title":"Condicionales","text":"<p>Las condiciones en PHP se utilizan para ejecutar bloques de c\u00f3digo en funci\u00f3n de si una expresi\u00f3n es verdadera o falsa. Son fundamentales para controlar el flujo de ejecuci\u00f3n de un programa. Las estructuras de control m\u00e1s comunes en PHP son <code>if</code>, <code>else</code>, <code>elseif</code>, y <code>switch</code>.</p>"},{"location":"php/#condicionales-if","title":"Condicionales <code>if</code>","text":"<pre><code>&lt;?php\nif (expresi\u00f3n) {\n    // C\u00f3digo que se ejecuta si la expresi\u00f3n es verdadera\n}\n?&gt;\n</code></pre> <p>Pongamos un ejemplo: <pre><code>&lt;?php\n$edad = 18;\n\nif ($edad &gt;= 18) {\n    echo \"Eres mayor de edad.\";\n}\n?&gt;\n</code></pre></p> <p>Este ejemplo verifica si la variable <code>$edad</code> es mayor o igual a 18. Si es as\u00ed, se imprime el mensaje \"Eres mayor de edad.\".</p>"},{"location":"php/#condicionales-if-else","title":"Condicionales <code>if-else</code>","text":"<pre><code>&lt;?php\nif (expresi\u00f3n) {\n    // C\u00f3digo que se ejecuta si la expresi\u00f3n es verdadera\n} else {\n    // C\u00f3digo que se ejecuta si la expresi\u00f3n es falsa\n}\n?&gt;\n</code></pre> <p>Pongamos un ejemplo: <pre><code>&lt;?php\n$a = 2;\nif ($a &gt; 3) {\n    echo \"El valor de a es mayor que 3\";\n} else {\n    echo \"El valor de a no es mayor que 3\";\n}\n?&gt;\n</code></pre></p> <p>Aqu\u00ed, como <code>$a</code> es 2, la condici\u00f3n no se cumple, por lo que se imprimir\u00e1 \"El valor de a no es mayor que 3\".</p>"},{"location":"php/#condicionales-if-elseif-else","title":"Condicionales <code>if-elseif-else</code>","text":"<pre><code>&lt;?php\nif (expresi\u00f3n1) {\n    // C\u00f3digo si expresi\u00f3n1 es verdadera\n} elseif (expresi\u00f3n2) {\n    // C\u00f3digo si expresi\u00f3n2 es verdadera\n} else {\n    // C\u00f3digo si ninguna expresi\u00f3n es verdadera\n}\n?&gt;\n</code></pre> <p>Pongamos un ejemplo: <pre><code>&lt;?php\n$a = 10;\nif ($a &gt; 20) {\n    echo \"El valor de a es mayor que 20\";\n} elseif ($a == 10) {\n    echo \"El valor de a es igual a 10\";\n} else {\n    echo \"El valor de a es menor que 10\";\n}\n?&gt;\n</code></pre> En este caso, la salida ser\u00e1 \"El valor de a es igual a 10\", ya que la condici\u00f3n <code>elseif ($a == 10)</code> es verdadera.</p>"},{"location":"php/#condicionales-switch","title":"Condicionales <code>switch</code>","text":"<pre><code>&lt;?php\nswitch (expresi\u00f3n) {\n    case valor1:\n        // C\u00f3digo si la expresi\u00f3n es igual a valor1\n        break;\n    case valor2:\n        // C\u00f3digo si la expresi\u00f3n es igual a valor2\n        break;\n    default:\n        // C\u00f3digo si ninguno de los valores coincide\n}\n?&gt;\n</code></pre> <p>Pongamos un ejemplo: <pre><code>&lt;?php\n$dia = 2;\n\nswitch ($dia) {\n    case 1:\n        echo \"Hoy es lunes\";\n        break;\n    case 2:\n        echo \"Hoy es martes\";\n        break;\n    case 3:\n        echo \"Hoy es mi\u00e9rcoles\";\n        break;\n    default:\n        echo \"D\u00eda desconocido\";\n}\n?&gt;\n</code></pre> En este ejemplo, como <code>$dia</code> es 2, la salida ser\u00e1 \"Hoy es martes\". El <code>break</code> se utiliza para salir del bloque switch una vez que se ha encontrado el caso correspondiente.</p>"},{"location":"php/#condicionales-ternarias","title":"Condicionales ternarias","text":"<pre><code>&lt;?php\n(expresi\u00f3n) ? valor_si_verdadero : valor_si_falso;\n?&gt;\n</code></pre> <p>Pongamos un ejemplo: <pre><code>&lt;?php\n$a = 5;\necho ($a &gt; 3) ? \"Mayor que 3\" : \"No mayor que 3\";\n?&gt;\n</code></pre></p> <p>Este ejemplo imprimir\u00e1 \"Mayor que 3\" porque la condici\u00f3n <code>a &gt; 3</code> es verdadera.</p>"},{"location":"php/#condicionales-con-operadores-logicos","title":"Condicionales con operadores l\u00f3gicos","text":"<pre><code>&lt;?php\n$a = 5;\n$b = 10;\nif ($a &gt; 3 &amp;&amp; $b &gt; 5) {\n    echo \"Ambas condiciones son verdaderas\";\n}\n?&gt;\n</code></pre> <p>Aqu\u00ed, ambas condiciones deben ser verdaderas para que se ejecute el bloque de c\u00f3digo, por lo que se imprimir\u00e1 \"Ambas condiciones son verdaderas\".</p>"},{"location":"php/#bucles","title":"Bucles","text":"<p>Los bucles nos permiten ejecutar un bloque de c\u00f3digo repetidamente mientras se cumpla una condici\u00f3n. En PHP, los bucles m\u00e1s comunes son <code>for</code>, <code>while</code>, <code>do-while</code> y <code>foreach</code>.</p>"}]}